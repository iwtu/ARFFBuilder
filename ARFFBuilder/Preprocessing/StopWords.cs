using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;

using ARFFBuilder.Entity;

namespace ARFFBuilder.ReportPreprocessing
{
    public class StopWords : SettingsClass, IStopWords
    {

        /// <summary>
        /// Loaded medical reports
        /// </summary>
        private List<MedicalReport> reports; 
        /// <summary>
        /// List of stopwords. Stopwords can be loaded from file or generated by IDF (Invert Document Frequency)
        /// </summary>
        private static List<string> stopWords = new List<string>();
        private static bool firstTimeRun = true;

        public StopWords(Settings settings) : base(settings) 
        {
            if (!firstTimeRun) return;
            firstTimeRun = false;
            this.reports = Reports.MedicalReports;
            if (settings.Preprocessing.StopwordsIDF) //generates stopwords by IDF
            {
                //new stopwords has be generated only if new reports were loaded
                if (settings.ReportsHasChanged) stopWords = GenerateByIDF(settings.Preprocessing.StopWordsIDFCount).Select(u => u.Name).ToList();
                if (settings.Preprocessing.StopWordsIDFOutput != null) WriteToFile(settings.Preprocessing.StopWordsIDFOutput);
            }
            //load stopwords from file
            else if (settings.StopwordsHasChanged)
            {
                if (settings.Preprocessing.StopwordsInput != null && settings.Preprocessing.StopwordsInput != "")
                    stopWords = File.ReadAllLines(settings.Preprocessing.StopwordsInput).ToList();
            }
        }

        public List<string> GetList()
        {
            return stopWords; ;
        }

        /// <summary>
        /// Filter stopwords in loaded medical report
        /// </summary>
        /// <param name="reports">Input and Output reports. </param>
        public void Filter(List<MedicalReport> reports)
        {
            StringBuilder sb = new StringBuilder();            
            foreach(var report in reports)
            {
                sb.Clear();
                foreach (var w in report.Report.Split(new char[] { ' ', '\t' }, StringSplitOptions.RemoveEmptyEntries))
                {
                    if (stopWords.Contains(w)) continue;
                    sb.Append(w);
                    sb.Append(' ');                    
                }
                report.Report = sb.ToString();
            }
        }
              
        /// <summary>
        /// Generates stop words by IDF.
        /// </summary>
        /// <param name="maxCount">Maximal count of generated stop words</param>
        /// <returns></returns>
        public List<FAttribute> GenerateByIDF(int maxCount)
        {
            settings.Preprocessing.StopwordsInput = null;  //FIXME: side effect          
            IFeatures features = new Features(settings, reports); 
            List<FAttribute> words = features.BuildAllUnigrams();
            words.Sort((one, two) => { return Utils.Computations.GetIDF(one, reports.Count).CompareTo(Utils.Computations.GetIDF(two, reports.Count)); });
            return words.GetRange(0, maxCount);
        }

        /// <summary>
        /// Stopwords writes into a file
        /// </summary>
        /// <param name="fileName">Filename where stopwords are written.</param>
        public void WriteToFile(string fileName)
        {
            File.WriteAllLines(fileName, stopWords);            
        }

        public bool IsStopWord(string word)
        {
            return stopWords.Contains(word);
        }
    }
}
