using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using ARFFBuilder.Entity;
using CommandLine;
using CommandLine.Text;

namespace ARFFBuilder
{
    /// <summary>
    /// Third party library for processing input options via console.  
    /// </summary>
    class ConsoleOptions
    {   
        [Option('i', "input", Required = true, HelpText = "Medical reports to read. Medical report per line. Medical report starts with diagnosis followed by medical text separated by space.", MetaValue="PATH")]
        public string InputFile { get; set; }

        [Option('o', "output", Required = true, HelpText = "Output ARFF file", MetaValue = "PATH")]
        public string OutputFile { get; set; }

        [Option('d', "diagnosis", Required = true, HelpText = "Diagnosis to train", MetaValue="STRING")]
        public string Diagnosis { get; set; }

        [Option('f', "features", Required = false, HelpText = "Read features from ARFF file", MetaValue="PATH")]
        public string Features { get; set; }    

        [Option('b', "bigrams", Required = false, HelpText = "Maximal count of bigrams", MetaValue="NUMBER")]
        public int? Bigrams { get; set; }

        [Option('t', "topwords", Required = false, HelpText = "Maximal count of top words.", MetaValue="NUMBER")]
        public int? TopWords { get; set; }

        [Option("pmi", Required = false, HelpText = "Use Pointwise Mutual Information for feature selection.")]
        public bool Pmi { get; set; }

        [Option("bigramfrequency", Required = false, DefaultValue = 2, HelpText = "Minimal frequency of bigram", MetaValue = "NUMBER")]
        public int BigramFrequency { get; set; }

        [Option("topwordfrequency", Required = false, DefaultValue = 5, HelpText = "Minimal frequency of top word", MetaValue = "NUMBER")]
        public int TopWordFrequency { get; set; }

        [Option("morphology", Required = false, HelpText = "Use morphology for disambiguation.", MetaValue="PATH")]
        public string Morpholofy { get; set; }

        [Option('s', "stopwords", Required = false, HelpText = "File contains stop words. Stop word pre line. Stop words are ignored in the input.", MetaValue = "PATH")]
        public string StopWords { get; set; }

        [Option("stopwords-idf", Required = false, HelpText = "Generate stopwords by Inverse Documnt Frequency (IDF)" )]
        public bool StopWordsIDF { get; set; }

        [Option("stopwords-idf-count", Required = false, DefaultValue = 200, HelpText = "Number of stop words generated by Inverse Document Frequency", MetaValue = "NUMBER")]
        public int StopWordsIDFCount { get; set; }

        [Option("stopwords-idf-output", Required = false, HelpText = "File where stop words generated by IDF will be saved.", MetaValue = "PATH")]
        public string StopWordsIDFOutput { get; set; }

        [Option("stemmer", Required = false, HelpText = "Use stemmer for preprocessing")]
        public bool UseStemmer { get; set; }

        [Option("punctuation", Required = false, HelpText = "Ignore basic punctuation")]
        public bool IgnorePunctuation { get; set; }


        [HelpOption]
        public string GetUsage()
        {            
            return HelpText.AutoBuild(this, (HelpText current) => HelpText.DefaultParsingErrorsHandler(this, current));
        }

        public Settings GetSettings()
        {
            Settings settings = new Settings();
            settings.ReportsFile = InputFile;
            settings.ARFFFile = OutputFile;
            settings.Diagnosis = Diagnosis;
            settings.FeaturesFile = Features;
            if (Features != null) settings.LoadFeatures = true;
            settings.Preprocessing.StopwordsInput = StopWords;
            settings.Preprocessing.MorphologyInput = Morpholofy;
            settings.Preprocessing.StopwordsIDF = StopWordsIDF;
            settings.Preprocessing.StopWordsIDFCount = StopWordsIDFCount == 0 ? 200 : StopWordsIDFCount;
            settings.Preprocessing.StopWordsIDFOutput = StopWordsIDFOutput;
            settings.PMI = Pmi;
            
            settings.Preprocessing.UseCzechStemmer = UseStemmer;
            settings.Preprocessing.FilterStopWords = StopWords != null;
            settings.Preprocessing.IgnorePunctuation = IgnorePunctuation;
            settings.Features = new Dictionary<FeaturesEnum, Settings.Feature>();
            if (Bigrams.HasValue) settings.Features[FeaturesEnum.Bigrams] = new Settings.Feature(FeaturesEnum.Bigrams, Bigrams.Value, BigramFrequency);
            if (TopWords.HasValue) settings.Features[FeaturesEnum.Unigrams] = new Settings.Feature(FeaturesEnum.Unigrams, TopWords.Value, TopWordFrequency);
            return settings;
        }
    }
}
